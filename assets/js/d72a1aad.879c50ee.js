"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[349],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),s=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return n?i.createElement(g,l(l({ref:t},p),{},{components:n})):i.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var s=2;s<o;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2936:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],a={sidebar_position:2},u="NLLB Monolingual Pipeline",s={unversionedId:"pipelines/monolingual",id:"pipelines/monolingual",title:"NLLB Monolingual Pipeline",description:'This is the monolingual "cleaning" pipeline, it does a few things:',source:"@site/docs/pipelines/monolingual.md",sourceDirName:"pipelines",slug:"/pipelines/monolingual",permalink:"/docs/pipelines/monolingual",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pipelines/monolingual.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"quickstartSidebar",previous:{title:"Global Mining Pipeline",permalink:"/docs/pipelines/global_mining"}},p={},c=[{value:"Run it",id:"run-it",level:2},{value:"Usefull overrides",id:"usefull-overrides",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Logging",id:"logging",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nllb-monolingual-pipeline"},"NLLB Monolingual Pipeline"),(0,o.kt)("p",null,'This is the monolingual "cleaning" pipeline, it does a few things:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"split paragraphs in sentences"),(0,o.kt)("li",{parentName:"ol"},"run some moses normalization+cleaning on the sentences"),(0,o.kt)("li",{parentName:"ol"},"filter the sentences that do not match some criteria (length, character ratios, etc.)"),(0,o.kt)("li",{parentName:"ol"},"run script detection at the sentence level, if this doesn't match the expected lang, throw the sentence out"),(0,o.kt)("li",{parentName:"ol"},"run lid detection at the sentence level, if this doesn't match the expected lang, throw the sentence out"),(0,o.kt)("li",{parentName:"ol"},"deduplicate sentences (this is done by sorting sentences)")),(0,o.kt)("p",null,"The core filtering is in ",(0,o.kt)("inlineCode",{parentName:"p"},"monolingual_line_processor.py")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"utils/text_filter.py")),(0,o.kt)("h2",{id:"run-it"},"Run it"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"python monolingual_pipeline.py data_dir=yourdatahere langs='[umb,ssw]'")),(0,o.kt)("p",null,"should be enough to get it running."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"data_dir")," is where the raw data is, should have subfolders per lang and files named with the pattern corpus_name.lang.xz"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"langs")," an array of langs to process in this run")),(0,o.kt)("h2",{id:"usefull-overrides"},"Usefull overrides"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"launcher.cluster=local local_tmp_dir=/tmp/monolingual")," if you want to run this locally instead of on the slurm"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"preproces_requirements.cpus_per_task=40")," this is the number of CPUs used to process each lang file in a slurm job. Higher means it will go faster, but you'll have a harder time to get a machine from the queue"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"corpus_filter=yourcorpus")," filter the lang files you'll process to only work on a specific corpus"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"input_file_glob_template")," replace this if the files in your data_dir do not follow the expected template")),(0,o.kt)("p",null,"See ",(0,o.kt)("inlineCode",{parentName:"p"},"monolingual.yaml")," for more possible configurations."),(0,o.kt)("h2",{id:"outputs"},"Outputs"),(0,o.kt)("p",null,"The run will be started with a custom working directory that follows the pattern: ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs/{date}/{start_time}"),", all the logs will go there (including executor_logs from slurm jobs). By default, the data output is set in ",(0,o.kt)("inlineCode",{parentName:"p"},"monolingual.yaml")," to be ",(0,o.kt)("inlineCode",{parentName:"p"},"output_dir: .")," this means that the outputs will go to lang dirs in the working directory and will go to different places depending on the day/time you start the run. This is useful for testing, but if you want to output somewhere else (like a central clean monolingual repo), override the ",(0,o.kt)("inlineCode",{parentName:"p"},"output_dir=/somethingstable/")," when starting the run."),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,'the run will log to wandb monolingual dashboard. Go to wanddb and make sure to enable grouping. Choose to group by "group" and "lang". There will be one sub-run per process (see num_cpu above) per lang + a global run for the root script. The global run will have a funny name and will only report data at the end of everything. You can check progress in each subrun.'))}m.isMDXComponent=!0}}]);