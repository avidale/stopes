"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[643],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||a;return n?o.createElement(m,r(r({ref:t},u),{},{components:n})):o.createElement(m,r({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const a={sidebar_position:3},r="Composition (aka pipelining)",l={unversionedId:"stopes/pipelining",id:"stopes/pipelining",title:"Composition (aka pipelining)",description:'The StopesModule framework provides a "launcher" abstraction that takes care of',source:"@site/docs/stopes/pipelining.md",sourceDirName:"stopes",slug:"/stopes/pipelining",permalink:"/stopes/docs/stopes/pipelining",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/stopes/pipelining.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"quickstartSidebar",previous:{title:"Module Overview",permalink:"/stopes/docs/stopes/module"},next:{title:"Configuration",permalink:"/stopes/docs/stopes/configuration"}},s={},c=[{value:"Asyncio",id:"asyncio",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"composition-aka-pipelining"},"Composition (aka pipelining)"),(0,i.kt)("p",null,'The StopesModule framework provides a "launcher" abstraction that takes care of\nscheduling your module "somewhere". Currently, and in most Stopes use cases, this\nsomewhere is SLURM, but you can also choose to launch it locally and more\nlauncher implementations might come when other execution environments are needed.'),(0,i.kt)("p",null,"The global_mining\npipeline is a good example of how all of this works together and you should\ncheck it out when reading this doc to have a good idea of how things fit\ntogether."),(0,i.kt)("p",null,"You can initialize a launcher from code with its python init, but ideally, your\npipeline will initialize it from a config with hydra:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"self.launcher = hydra.utils.instantiate(config.launcher)\n")),(0,i.kt)("p",null,"We provide pre-made configs for the main SLURM launcher and instantiating the\nlauncher from config will allow you to override it from the CLI for debugging."),(0,i.kt)("p",null,"Once you have a launcher, you can launch a module in code with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"embedded_files = await self.launcher.schedule(embed_module)\n")),(0,i.kt)("p",null,"The launcher will take care of submitting a job to the execution engine (e.g.\nSLURM) and wait for it to be done. The launcher will also take care of raising\nany exception happening in the execution engine and if using the submitit\nlauncher, it will also take care of checkpointing (see above)."),(0,i.kt)("h2",{id:"asyncio"},"Asyncio"),(0,i.kt)("p",null,"Because",(0,i.kt)("inlineCode",{parentName:"p"},"launcher.schedule"),"will potentially schedule your module run method on\na separate host, wait for it to find a slot and to eventually finish. The result\nthat this ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule")," method returns is not available immediately. We use python\nasyncio to deal with waiting for the results to be available. This means that\nyou need to ",(0,i.kt)("inlineCode",{parentName:"p"},"await "),"the result of schedule before being able to use it."),(0,i.kt)("p",null,'This also means that you can use asyncio helpers to organize your code and tell\nthe launcher when things can be scheduled in parallel. For instance you can\nawait for two results in "parallel" with:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'src_embeddings, tgt_embeddings = await asyncio.gather(\n     launcher.schedule(\n          StopesModule.build(self.config.embed_text, lang="bn")\n     ),\n     launcher.schedule(\n          StopesModule.build(self.config.embed_text, lang="hi")\n     ),\n )\n')))}p.isMDXComponent=!0}}]);