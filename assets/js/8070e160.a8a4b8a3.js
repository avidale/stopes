"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[651],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2257:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},s="Getting started with Stopes",p={unversionedId:"quickstart",id:"quickstart",title:"Getting started with Stopes",description:"Welcome to Stopes, this is a quickstart guide to discover how to run automated pipelines with Stopes. In this example, you'll be running",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/stopes/docs/quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"quickstartSidebar",next:{title:"Stopes Modules",permalink:"/stopes/docs/category/stopes-modules"}},u={},d=[{value:"Installation",id:"installation",level:2},{value:"Getting Data",id:"getting-data",level:2},{value:"Configuring the pipeline",id:"configuring-the-pipeline",level:2},{value:"Run the Pipeline",id:"run-the-pipeline",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-stopes"},"Getting started with Stopes"),(0,r.kt)("p",null,"Welcome to Stopes, this is a quickstart guide to discover how to run automated pipelines with Stopes. In this example, you'll be running\nglobal mining with the stopes toolchain. (Inspired by\n",(0,r.kt)("a",{parentName:"p",href:"https://ai.facebook.com/blog/ccmatrix-a-billion-scale-bitext-data-set-for-training-translation-models/"},"CCMatrix"),")."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Follow the installation steps from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/stopes/blob/main/README.md"},"project's README"),", we recommend doing this in a separate ",(0,r.kt)("a",{parentName:"p",href:"https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html"},"conda environment"),"."),(0,r.kt)("h2",{id:"getting-data"},"Getting Data"),(0,r.kt)("p",null,"To run the global mining pipeline, you first need to get some monolingual data.\nThe ",(0,r.kt)("a",{parentName:"p",href:"https://statmt.org/wmt22/large-scale-multilingual-translation-task.html"},"WMT22 Shared Task: Large-Scale Machine Translation Evaluation for African\nLanguages"),"\nhas some interesting monolingual data for some African languages."),(0,r.kt)("p",null,"You also need some trained encoder, we usually use stopes with LASER and we can\nfind such trained encoders for the languages in the WMT22 shared task too."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"demo/prepare.sh")," script will download the monolingual data and LASER encoders\nfor you. Start by running this script and wait for the download to finish."),(0,r.kt)("h2",{id:"configuring-the-pipeline"},"Configuring the pipeline"),(0,r.kt)("p",null,"In stopes pipelines, we use ",(0,r.kt)("a",{parentName:"p",href:"https://hydra.cc/"},"hydra"),' to configure the runs.\nWith hydra, you can configure everything with "overrides" on the cli, but it\'s\noften easier to put the configurations in yaml files as there is a lot of things\nto setup.'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"stopes/pipelines/bitext/conf/preset/demo.yaml")," is a demo configuration for the\ndata and encoders that we've downloaded in the previous steps. Check out the\ncomments in that file."),(0,r.kt)("p",null,"The important parts of that preset config is:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"we setup the launcher to run on your local computer (no need for a cluster)"),(0,r.kt)("li",{parentName:"ol"},"we setup an alias for a ",(0,r.kt)("inlineCode",{parentName:"li"},"demo_dir")," folder, so you can point to the\ndata/models from the cli"),(0,r.kt)("li",{parentName:"ol"},"we setup some information about the ",(0,r.kt)("inlineCode",{parentName:"li"},"data"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"some naming, to get nice file names as outputs"),(0,r.kt)("li",{parentName:"ul"},"where the data is found (with ",(0,r.kt)("inlineCode",{parentName:"li"},"shard_glob"),")"))),(0,r.kt)("li",{parentName:"ol"},"we tell the pipeline where to find the encoder and SentencePiece model (SPM) uses\nto embed the text. We do that for each lang in ",(0,r.kt)("inlineCode",{parentName:"li"},"lang_configs"),". Practically,\nif you are only processing a few languages, you don't need so many entries,\nhere we preset them for all languages from the WMT22 task")),(0,r.kt)("h2",{id:"run-the-pipeline"},"Run the Pipeline"),(0,r.kt)("p",null,"You can now start the pipeline with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python -m stopes.pipelines.bitext.global_mining_pipeline src_lang=fuv tgt_lang=zul demo_dir=.../stopes-repo/demo +preset=demo output_dir=. embed_text=laser3\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src_lang")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"tgt_lang")," specify the pair of languages we want to process,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"demo_dir")," is the new variable we introduce in our preset/demo.yaml file, to\npoint to where the ",(0,r.kt)("inlineCode",{parentName:"li"},"prepare.sh")," script downloaded our data,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"+preset=demo")," tells hydra to load the demo.yaml preset file to set our\ndefaults (the ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," here is because we are telling hydra to append a group that\ndoesn't exist in the default config, see the ",(0,r.kt)("a",{parentName:"li",href:"https://hydra.cc/docs/1.0/advanced/override_grammar/basic/#basic-override-syntax"},"hydra\ndoc"),"\nfor details),"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"output_dir")," specifies where we want the output (current run directory),"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"embed_text=laser3")," tells the pipeline to use the laser3 encoding code to load\nthe models and encode the text.")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("h2",{parentName:"div",id:"explore-more"},"Explore More"),(0,r.kt)("p",{parentName:"div"},"Check out these docs to learn more:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"category/prebuilt-pipelines"},"Prebuilt Pipelines")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"stopes"},"stopes Module Framework"))))))}m.isMDXComponent=!0}}]);